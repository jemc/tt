#!/usr/bin/bash

# Associative array of default options
declare -A default_opts
default_opts["refresh_time"]=0.2
default_opts["format_duration"]="%H:%M:%S"
default_opts["format_time"]="%H:%M:%S"
default_opts["format_date"]="%a %b %d %Y"
default_opts["format_entry"]=$"  %{duration} | %{last_date} | %{last_time} - %{curr_time}"
default_opts["format_total"]="total: %H:%M:%S"


# Associative array of operational options
#  Start by copying all defaults
declare -A opts=()
for key in "${!default_opts[@]}"; do
  opts["$key"]="${default_opts["$key"]}"
done

# Associative array of state variables
#   Each is able to be interpolated into format strings
declare -A state

# Indexed array of entries
#   Each line in entries section of file is interpreted as an entry
declare -a entries=()


function usage {
  cat <<USAGE_STR
Usage: tt path [<options>]

When used with no options, tt begins a new time entry in the file specified by 
the path argument.  If the file or the directory path do not exist, they are 
created.

command line options:
  -h          show this message and exit
  -e "entry"  specify a string as the new entry rather than starting the timer
  -s          show a summary of the given path; 
                if the path is file, use it as the file to summarize;
                if it is a directory, look for tt files recursively within

Send a SIGINT or SIGTERM or stop the timer.  Most commonly, this can be done 
with the Ctrl+C key combination. 

The data is saved back to the file periodically and upon receiving the 
terminating signal. Saved data includes settings variables, all time entries, 
and anything else that was originally in the file.

Upon opening an existing file, settings variables are read in if they exist in 
the recognized format.  Additionally, each parent directory will be checked for
a .tt-defaults file.  If such a file exists, settings variables found within 
it will be used, with more local files overriding upper-level files.

USAGE_STR
  exit 1
}

function parse_opts {
  while getopts “:he:s” OPTION; do
    case "${OPTION}" in
      
      h) usage;;
      e) opts['manual_entry']="${OPTARG}";;
      s) opts['summary']=true;;
      
    esac
  done
}

function parse_arguments {
  
  # Note that the getopts loop is happening twice here...
  # This construction is used allow the mandatory 'file' path arg
  #   to be placed before, after or during the opt args parsed by getopts
  
  parse_opts "$@" # Run getopts in a loop, stopping at the first non-option arg
  shift $((OPTIND-1)) # Shift args to put the arg rejected by getopts in $1

  state['file']=$1 # Save the rejected arg as the file path

  shift 1; OPTIND=1 # Shift args past the rejected arg and reset OPTIND
  
  parse_opts "$@" # Run again, picking up any other options
  shift $((OPTIND-1)) # Shift args past the second pass of scanned opts
  
  [[ -z $@ ]] || usage # Bad args if $@ is not empty at this point
  
  # Process and verify state and option variables here
  state['file_dir']=$(dirname ${state['file']})
  state['file_name']=$(basename ${state['file']})
}



# TODO: Don't destroy other random stuff in file header

# add a note to the new entry (-n)tustusage 
# specify a different output file than input file (-o)
# specify a different output format than input format (-f)

function touch_dir {
  mkdir -p "${state['file_dir']}"
}

function touch_file {
  touch_dir
  touch "${state['file']}"
}

function read_file {
  local regexp_option="^([A-Za-z_]+)=\"(.*)\"$"
  local regexp_entries_header="^entries:$"
  local entry_mode=""
  
  touch_file
  
  entries=()
  
  while IFS= read -r line; do
    
    if [[ $entry_mode ]]
      then # Read the line in as an entry
      entries[${#entries[@]}]="${line}"
    
    elif [[ $line =~ $regexp_entries_header ]]
      then # Recognize the entries header and begin entry mode
      entry_mode=true
    
    elif [[ $line =~ $regexp_option ]]
      then # Recognize the line as an option declaration and retain it
      opts["${BASH_REMATCH[1]}"]=$"${BASH_REMATCH[2]}"
    fi
    
  done < "${state['file']}"
}

function save_file {
  
  touch_file
  
  sh -c "cat > ${state['file']}" <<FILE_FMT
#tt

refresh_time="${opts["refresh_time"]}"

format_duration="${opts["format_duration"]}"
format_time="${opts['format_time']}"
format_date="${opts['format_date']}"
format_entry="${opts['format_entry']}"
format_total="${opts['format_total']}"

entries:
$(
for entry in "${entries[@]}"; do
  echo "${entry}"
done
)
FILE_FMT

}


function update_time {
  state['curr_date']=$(date +"${opts['format_date']}")
  state['curr_time']=$(date +"${opts['format_time']}")
  state['curr_secs']=$(date +"%s")
}

function start_entry {
  update_time
  state['last_date']="${state['curr_date']}"
  state['last_time']="${state['curr_time']}"
  state['last_secs']="${state['curr_secs']}"
  entries[${#entries[@]}]=""
  update_curr_entry
}

function update_curr_entry {
  update_time
  state['duration']=$(date -u -d @"$((state['curr_secs']-state['last_secs']))" +"${opts['format_duration']}")
  
  curr_entry="${opts['format_entry']}"
  for key in "${!state[@]}"; do
    curr_entry="${curr_entry/\%\{$key\}/${state[$key]}}"
  done
  
  entries[${#entries[@]}-1]="${curr_entry}"
}

function show_curr_entry {
  echo "${curr_entry}"
}

function do_over {
  echo -ne "\033[1A"
}

function trap_func {
  echo
  echo 'saving...'
  save_file
  echo 'saved!'
  exit 0
}
trap trap_func SIGINT SIGTERM

function run_new_entry {
  start_entry
  show_curr_entry

  while true; do
    update_curr_entry
    do_over
    show_curr_entry
    sleep "${opts['refresh_time']}"
  done
}

function show_existing {
  for entry in "${entries[@]}"; do
    echo "${entry}"
  done
}

function show_total {
  # Construct a regular expression that will match the whole entry 
  #   and capture the duration string
  #   Note that back-to-back %{state}%{vars} will cause issues here...
  #     (not sure how to deal with that case...)
  local regexp
  regexp="${opts['format_entry']}"
  regexp=$(echo "${regexp}" | perl -pe 's/(.)/\\\1/g')
  regexp=$(echo "${regexp}" | perl -pe 's/\\\%\\\{\\d\\u\\r\\a\\t\\i\\o\\n\\\}/(.+)/g')
  regexp=$(echo "${regexp}" | perl -pe 's/\\\%\\\{(\\[^}])*\\\}/.+/g')
  
  local total_duration
  total_duration=$((0))
  for entry in "${entries[@]}"; do
    if [[ "$entry" =~ $regexp ]]; then
      # Note that date is guessing the date formaat and using an uncommon one might break it...
      #   (not sure how to deal with that case...)
      local duration
      read -a duration <<< $(date -d "${BASH_REMATCH[1]}" +"%H %M %S")
      total_duration=$(( total_duration + duration[0]*60*60 + duration[1]*60 + duration[2] ))
    fi
  done
  
  echo $(date -u -d @$total_duration +"${opts['format_total']}")
}


function operation_normal {
  
  read_file
  show_existing
  
  if [[ -n "${opts['manual_entry']}" ]]; then
    entries[${#entries[@]}]="${opts['manual_entry']}"
    echo "${opts['manual_entry']}"
    save_file
  else
    run_new_entry
  fi
}


function operation_summary {
  
  # For each file described by the input path
  for file in $(find ${state['file']}); do
    
    # If file is readable and isn't a directory...
    if [[ -r $file ]] && [[ ! -d $file ]]; then
      
      # If the file has the tt header
      if [[ "$(read -n 3 str <$file; echo $str)" == "#tt" ]] || [[ $(head -n 1 $file) =~ "#tt" ]]; then
        
        state['file']="${file}"
        echo $file
        read_file
        show_existing
        show_total
        echo
      fi
    fi
  done
  
}


parse_arguments "$@"

if [[ -n "${opts['summary']}" ]]; then
  operation_summary
else
  operation_normal
fi
